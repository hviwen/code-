export PATH="/usr/local/mysql/bin:$PATH"
# ==============================================================================
# Basic Environment
# ==============================================================================

# Language and Locale
export LANG=en_US.UTF-8
export LC_ALL=en_US.UTF-8

# Terminal Colors
export CLICOLOR=1
export LSCOLORS="gxBxhxDxfxhxhxhxhxcxcx"

# History Settings
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history
setopt HIST_IGNORE_ALL_DUPS    # 忽略重复历史
setopt HIST_SAVE_NO_DUPS       # 保存时不记录重复
setopt INC_APPEND_HISTORY      # 实时追加历史

# ==============================================================================
# PATH Configuration
# ==============================================================================

# 优先级顺序：Homebrew > MacPorts > 用户本地路径
if [[ $(uname -m) == 'arm64' ]]; then
  # Apple Silicon Homebrew
  eval "$(/opt/homebrew/bin/brew shellenv)"
else
  # Intel Homebrew
  eval "$(/usr/local/bin/brew shellenv)"
fi

# 动态路径配置
export PATH="$HOME/.local/bin:$HOME/bin:$PATH"
export PATH="/opt/local/bin:/opt/local/sbin:$PATH"  # MacPorts

# ===== Homebrew 镜像配置 =====
export HOMEBREW_BREW_GIT_REMOTE="https://mirrors.ustc.edu.cn/brew.git"  # 可选，仅用于克隆仓库加速
export HOMEBREW_BOTTLE_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles"
export HOMEBREW_API_DOMAIN="https://mirrors.ustc.edu.cn/homebrew-bottles/api"
export HOMEBREW_CORE_GIT_REMOTE="https://mirrors.ustc.edu.cn/brew.git"

# ==============================================================================
# Oh My Zsh Configuration
# ==============================================================================

export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME=""  # 使用 Starship 替代主题

# 插件列表（确保顺序正确）
plugins=(
  git
  macos
  docker
  docker-compose
  colored-man-pages
  command-not-found
  history
  node
  npm
  yarn
  zsh-history-substring-search  # 需在 syntax-highlighting 前
  zsh-syntax-highlighting
  zsh-autosuggestions
  you-should-use
)

# 加载 Oh My Zsh
source $ZSH/oh-my-zsh.sh

# ==============================================================================
# Homebrew 补全
# ==============================================================================
# if type brew &>/dev/null; then
#  # 添加 Homebrew 的补全路径
#  FPATH="$(brew --prefix)/share/zsh/site-functions:$FPATH"
#  # 重新初始化补全系统
#  autoload -Uz compinit
#  compinit
# fi

# ==============================================================================
# Tool Initializations
# ==============================================================================

# Starship 提示符
if command -v starship >/dev/null; then
  export STARSHIP_CONFIG=~/.config/starship.toml
  export STARSHIP_CACHE=~/.starship/cache
  eval "$(starship init zsh)"
fi

# Zoxide (智能 cd)
if command -v zoxide >/dev/null; then
  eval "$(zoxide init zsh)"
fi

# Direnv (环境变量管理)
if command -v direnv >/dev/null; then
  eval "$(direnv hook zsh)"
fi

# FZF (模糊搜索)
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# ==============================================================================
# Development Environments
# ==============================================================================

# Editor (优先使用 VS Code)
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='code'
  command -v code >/dev/null || export EDITOR='vim'
fi

# --- Java ---
if [ -x /usr/libexec/java_home ]; then
  export JAVA_HOME=$(/usr/libexec/java_home 2>/dev/null)
  [ -n "$JAVA_HOME" ] && export PATH="$JAVA_HOME/bin:$PATH"
fi

# --- Node.js (NVM) ---
# NVM 配置
export NVM_DIR="$HOME/.nvm"
local_nvm_path="/opt/homebrew/opt/nvm/nvm.sh"
[ -s "$local_nvm_path" ] && \. "$local_nvm_path"  # This loads nvm
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# --- Rust ---
[ -f "$HOME/.cargo/env" ] && source "$HOME/.cargo/env"

# --- Go ---
export GOPATH="$HOME/go"
[ -d "$GOPATH/bin" ] && export PATH="$GOPATH/bin:$PATH"

# --- Python Poetry ---
[ -d "$HOME/.poetry/bin" ] && export PATH="$HOME/.poetry/bin:$PATH"

# --- Webstorm ---
___MY_VMOPTIONS_SHELL_FILE="${HOME}/.jetbrains.vmoptions.sh"; 
if [ -f "${___MY_VMOPTIONS_SHELL_FILE}" ]; then . "${___MY_VMOPTIONS_SHELL_FILE}"; 
fi

# ==============================================================================
# Aliases & Functions
# ==============================================================================

# Navigation
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias dt="cd ~/Desktop"
alias dl="cd ~/Downloads"
alias docs="cd ~/Documents"

# Listing
alias ls="ls -G"
alias ll="ls -lh"
alias la="ls -lah"
command -v exa >/dev/null && alias ls="exa" && alias ll="exa -lh" && alias la="exa -lah"

# Git
alias gs="git status"
alias gc="git commit"
alias ga="git add"
alias gd="git diff"
alias gp="git push"
alias gl="git pull"
alias gco="git checkout"
alias glog="git log --oneline --decorate --graph"

# System
alias clr="clear"
alias reload="source ~/.zshrc && echo 'Config reloaded'"
alias zshconfig="$EDITOR ~/.zshrc"

# Utils
alias cpv="rsync -ah --info=progress2"
alias mvv="rsync -ah --remove-source-files --info=progress2"
mkcd() { mkdir -p "$1" && cd "$1" }

# 前端开发快捷命令
alias ni="npm install"
alias nid="npm install --save-dev"
alias nr="npm run"
alias ns="npm start"
alias nt="npm test"
alias nb="npm run build"
alias pi="pnpm install"
alias pr="pnpm run"
alias ps="pnpm start"
alias pt="pnpm test"
alias pb="pnpm run build"
alias yi="yarn install"
alias yr="yarn run"
alias ys="yarn start"
alias yt="yarn test"
alias yb="yarn build"

# ==============================================================================
# macOS Specific
# ==============================================================================

# Finder 显示隐藏文件
alias showfiles="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
alias hidefiles="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

# 清理 LaunchServices
alias lscleanup="/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user"

# 清空垃圾箱
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes ~/.Trash"

# ==============================================================================
# Completion & Key Bindings
# ==============================================================================

# 补全配置
zstyle ':completion:*' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select=2
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"

# 键位绑定
bindkey -e
bindkey '^[[1;5C' forward-word    # Ctrl+→ 跳单词
bindkey '^[[1;5D' backward-word   # Ctrl+← 跳单词
bindkey '^[[H' beginning-of-line  # Home
bindkey '^[[F' end-of-line        # End

# ==============================================================================
# Windsurf
# ==============================================================================

# ==============================================================================
# IDE & Editor Tools
# ==============================================================================

# Windsurf
export PATH="/Users/pan/.codeium/windsurf/bin:$PATH"

# VS Code (如果已安装)
if [[ -d "/Applications/Visual Studio Code.app" ]]; then
  export PATH="/Applications/Visual Studio Code.app/Contents/Resources/app/bin:$PATH"
fi

# ==============================================================================
# Android
# ==============================================================================

export ANDROID_HOME=$HOME/Library/Android/sdk
export PATH=$PATH:$ANDROID_HOME/emulator
export PATH=$PATH:$ANDROID_HOME/platform-tools
export TLDR_LANGUAGE=zh
alias tldr="tldr -L zh"

# VS Code 别名
alias c="code"
alias co="code ."
alias cn="code -n"
alias cw="code --wait"

# ==============================================================================
# Package Manager Update & Cleanup Functions
# ==============================================================================

# Homebrew 一键更新和清理函数
brew-update() {
    echo "🍺 Starting Homebrew update and cleanup..."
    echo "" 
    
    # 检查 Homebrew 是否已安装
    if ! command -v brew &> /dev/null; then
        echo "❌ Homebrew is not installed!"
        return 1
    fi
    
    echo "📦 Updating Homebrew..."
    brew update
    
    echo "⬆️  Upgrading installed packages..."
    brew upgrade
    
    echo "🧹 Cleaning up old versions and cache..."
    brew cleanup
    
    echo "🔍 Running doctor check..."
    brew doctor
    
    echo "📊 Showing disk space saved..."
    echo "Cache location: $(brew --cache)"
    
    echo "✅ Homebrew update and cleanup completed! 🎉"
}

# MacPorts 一键更新和清理函数
port-update() {
    echo "🚢 Starting MacPorts update and cleanup..."
    echo ""
    
    # 检查 MacPorts 是否已安装
    if ! command -v port &> /dev/null; then
        echo "❌ MacPorts is not installed!"
        return 1
    fi
    
    echo "📦 Updating MacPorts base and ports tree..."
    sudo port selfupdate
    
    echo "⬆️  Upgrading outdated ports..."
    sudo port upgrade outdated
    
    echo "🧹 Cleaning inactive ports..."
    sudo port clean --all all
    
    echo "🗑️  Removing inactive ports..."
    sudo port uninstall inactive
    
    echo "📊 Showing installed ports..."
    port installed requested
    
    echo "✅ MacPorts update and cleanup completed! 🎉"
}

# 综合更新函数（同时更新两个包管理器）
update-all-packages() {
    echo "🚀 Starting comprehensive package manager update..."
    echo "==========================================="
    
    # 更新 Homebrew
    if command -v brew &> /dev/null; then
        brew-update
        echo ""
    else
        echo "⚠️  Homebrew not found, skipping..."
    fi
    
    echo "==========================================="
    
    # 更新 MacPorts
    if command -v port &> /dev/null; then
        port-update
        echo ""
    else
        echo "⚠️  MacPorts not found, skipping..."
    fi
    
    echo "🎊 All package managers updated successfully!"
}

# 设置别名
alias bu='brew-update'          # Homebrew 更新
alias pu='port-update'          # MacPorts 更新  
alias ua='update-all-packages'  # 全部更新


# opencode
export PATH=/Users/pan/.opencode/bin:$PATH
___MY_VMOPTIONS_SHELL_FILE="${HOME}/.jetbrains.vmoptions.sh"; if [ -f "${___MY_VMOPTIONS_SHELL_FILE}" ]; then . "${___MY_VMOPTIONS_SHELL_FILE}"; fi

# pnpm
export PNPM_HOME="/Users/pan/Library/pnpm"
case ":$PATH:" in
  *":$PNPM_HOME:"*) ;;
  *) export PATH="$PNPM_HOME:$PATH" ;;
esac
# pnpm end

# ==============================================================================
# Version Information Command
# ==============================================================================

# 显示各种工具和包管理器的版本信息
version() {
    echo "🔧 System & Tool Versions"
    echo "=============================================="
    
    # 系统信息
    echo "\n📱 System Information:"
    echo "   macOS: $(sw_vers -productVersion)"
    echo "   Kernel: $(uname -r)"
    echo "   Architecture: $(uname -m)"
    
    # Shell & Terminal
    echo "\n🐚 Shell & Terminal:"
    [ -n "$ZSH_VERSION" ] && echo "   Zsh: $ZSH_VERSION" || echo "   Shell: $SHELL"
    command -v starship >/dev/null && echo "   Starship: $(starship --version | head -1)" || echo "   Starship: Not installed"
    
    # 包管理器
    echo "\n📦 Package Managers:"
    if command -v brew >/dev/null; then
        echo "   Homebrew: $(brew --version | head -1 | cut -d' ' -f2)"
    else
        echo "   Homebrew: Not installed"
    fi
    
    if command -v port >/dev/null; then
        echo "   MacPorts: $(port version | grep Version | cut -d' ' -f2)"
    else
        echo "   MacPorts: Not installed"
    fi
    
    if command -v pip >/dev/null; then
        echo "   pip: $(pip --version | cut -d' ' -f2)"
    else
        echo "   pip: Not installed"
    fi
    
    if command -v pip3 >/dev/null; then
        echo "   pip3: $(pip3 --version | cut -d' ' -f2)"
    else
        echo "   pip3: Not installed"
    fi
    
    if command -v poetry >/dev/null; then
        echo "   Poetry: $(poetry --version | cut -d' ' -f3)"
    else
        echo "   Poetry: Not installed"
    fi
    
    # Node.js 生态
    echo "\n🟩 Node.js Ecosystem:"
    if command -v node >/dev/null; then
        echo "   Node.js: $(node --version)"
    else
        echo "   Node.js: Not installed"
    fi
    
    if command -v nvm >/dev/null; then
        echo "   NVM: $(nvm --version)"
    else
        echo "   NVM: Not installed"
    fi
    
    if command -v npm >/dev/null; then
        echo "   npm: $(npm --version)"
    else
        echo "   npm: Not installed"
    fi
    
    if command -v yarn >/dev/null; then
        echo "   Yarn: $(yarn --version)"
    else
        echo "   Yarn: Not installed"
    fi
    
    if command -v pnpm >/dev/null; then
        echo "   pnpm: $(pnpm --version)"
    else
        echo "   pnpm: Not installed"
    fi
    
    # 编程语言
    echo "\n💻 Programming Languages:"
    if command -v python >/dev/null; then
        echo "   Python: $(python --version 2>&1 | cut -d' ' -f2)"
    else
        echo "   Python: Not installed"
    fi
    
    if command -v python3 >/dev/null; then
        echo "   Python3: $(python3 --version | cut -d' ' -f2)"
    else
        echo "   Python3: Not installed"
    fi
    
    if command -v java >/dev/null; then
        echo "   Java: $(java -version 2>&1 | head -1 | cut -d'"' -f2)"
    else
        echo "   Java: Not installed"
    fi
    
    if command -v go >/dev/null; then
        echo "   Go: $(go version | cut -d' ' -f3)"
    else
        echo "   Go: Not installed"
    fi
    
    if command -v rustc >/dev/null; then
        echo "   Rust: $(rustc --version | cut -d' ' -f2)"
    else
        echo "   Rust: Not installed"
    fi
    
    if command -v cargo >/dev/null; then
        echo "   Cargo: $(cargo --version | cut -d' ' -f2)"
    else
        echo "   Cargo: Not installed"
    fi
    
    # 数据库
    echo "\n🗄️  Databases:"
    if command -v mysql >/dev/null; then
        echo "   MySQL: $(mysql --version | cut -d' ' -f6 | cut -d',' -f1)"
    else
        echo "   MySQL: Not installed"
    fi
    
    if command -v psql >/dev/null; then
        echo "   PostgreSQL: $(psql --version | cut -d' ' -f3)"
    else
        echo "   PostgreSQL: Not installed"
    fi
    
    if command -v redis-cli >/dev/null; then
        echo "   Redis: $(redis-cli --version | cut -d' ' -f2)"
    else
        echo "   Redis: Not installed"
    fi
    
    if command -v mongo >/dev/null; then
        echo "   MongoDB: $(mongo --version | head -1 | cut -d' ' -f4)"
    else
        echo "   MongoDB: Not installed"
    fi
    
    # 容器化工具
    echo "\n🐳 Containerization:"
    if command -v docker >/dev/null; then
        echo "   Docker: $(docker --version | cut -d' ' -f3 | cut -d',' -f1)"
    else
        echo "   Docker: Not installed"
    fi
    
    if command -v docker-compose >/dev/null; then
        echo "   Docker Compose: $(docker-compose --version | cut -d' ' -f3 | cut -d',' -f1)"
    else
        echo "   Docker Compose: Not installed"
    fi
    
    # 版本控制
    echo "\n🔄 Version Control:"
    if command -v git >/dev/null; then
        echo "   Git: $(git --version | cut -d' ' -f3)"
    else
        echo "   Git: Not installed"
    fi
    
    if command -v gh >/dev/null; then
        echo "   GitHub CLI: $(gh --version | head -1 | cut -d' ' -f3)"
    else
        echo "   GitHub CLI: Not installed"
    fi
    
    # 编辑器 & IDE
    echo "\n✏️  Editors & IDEs:"
    if command -v code >/dev/null; then
        echo "   VS Code: $(code --version | head -1)"
    else
        echo "   VS Code: Not installed"
    fi
    
    if command -v vim >/dev/null; then
        echo "   Vim: $(vim --version | head -1 | cut -d' ' -f5)"
    else
        echo "   Vim: Not installed"
    fi
    
    if command -v nvim >/dev/null; then
        echo "   Neovim: $(nvim --version | head -1 | cut -d' ' -f2)"
    else
        echo "   Neovim: Not installed"
    fi
    
    # 实用工具
    echo "\n🛠️  Utilities:"
    if command -v curl >/dev/null; then
        echo "   curl: $(curl --version | head -1 | cut -d' ' -f2)"
    else
        echo "   curl: Not installed"
    fi
    
    if command -v wget >/dev/null; then
        echo "   wget: $(wget --version | head -1 | cut -d' ' -f3)"
    else
        echo "   wget: Not installed"
    fi
    
    if command -v jq >/dev/null; then
        echo "   jq: $(jq --version | cut -d'-' -f2)"
    else
        echo "   jq: Not installed"
    fi
    
    if command -v fzf >/dev/null; then
        echo "   fzf: $(fzf --version | cut -d' ' -f1)"
    else
        echo "   fzf: Not installed"
    fi
    
    if command -v exa >/dev/null; then
        echo "   exa: $(exa --version | head -1 | cut -d' ' -f2)"
    else
        echo "   exa: Not installed"
    fi
    
    if command -v zoxide >/dev/null; then
        echo "   zoxide: $(zoxide --version | cut -d' ' -f2)"
    else
        echo "   zoxide: Not installed"
    fi
    
    if command -v direnv >/dev/null; then
        echo "   direnv: $(direnv --version)"
    else
        echo "   direnv: Not installed"
    fi
    
    if command -v tldr >/dev/null; then
        echo "   tldr: $(tldr --version | head -1 | cut -d' ' -f2)"
    else
        echo "   tldr: Not installed"
    fi
    
    echo "\n=============================================="
    echo "✅ Version check completed!"
}

# 设置别名
alias v='version'         # 简短别名
alias versions='version'  # 复数形式别名
